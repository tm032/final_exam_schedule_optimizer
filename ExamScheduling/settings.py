"""
Django settings for ExamScheduling project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

"""
Exam Scheduler Web-UI 
Tsugunobu Miyake, Luke Snyder. 2025

Django settings file. 
This file contains custom parameters for the exam scheduling application.
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ------------------------------------------
# CUSTOM CONFIGURATIONS FOR THE SCHEDULING 
# ------------------------------------------

# Temporary directory for storing files during optimization
OPT_HOME_DIR = os.path.join(BASE_DIR, "temp")

# Maximum number of students per time slot
# Hard limit to ensure not too many courses are scheduled at the same time.
# Recommended: 1500 students but increase the limit if the student enrollment rises.
MAX_STUDENTS_PER_SLOT = 1500

# Use GRASP algorithm for optimization
# Recommended: True
USE_GRASP = True  

# List of number of courses to handle in phase 1 optimization.
# Recommended: 17-21 courses.
# Does not recommend adding more than 5 different numbers.
PHASE_1_NUM_COURSES = [17, 18, 19, 20, 21]

# Proceed to the phase 2 optimization after phase 1 after not finding any new incumbent solutions for the given seconds.
# Recommended: 30 to 60 seconds.
PHASE_1_TIME_LIMIT = 60 # in seconds

# Time limit for phase 2 optimization
# Recommended: 2 to 8 hours.
PHASE_2_TIME_LIMIT = 60 * 60 * 4 # in seconds

# CSV File Column names in students.csv
RANDOMIZED_ID_COL = "Randomized ID"
STUDENT_CRN_COL = "CRN " # STUDENTS_CRN_COLS + "1", "2", etc. -->  "CRN 1", "CRN 2" ... 

# CSV File Column names in courses.csv
CRN_COL = "Course Reference Number"
CLASS_DAYS_COL = "Meeting Days"
CLASS_TIME_COL = "Section Begin Time"
COURSE_ID_COL = "Course Identification"
SCHEDULE_DESCRIPTION_COL = "Schedule Description"
SECTION_COL = "Section"
INSTRUCTOR_COL = "Primary Instructor Name"
TITLE_COL = "Course Title"
GRADABLE_COL = "Gradable Ind"
SUBJECT_COL = "Subject"
COURSE_NUMBER_COL = "Course Number"

# ---------------------------------------
# DEVELOPMENT SETTINGS
# ---------------------------------------

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ''

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'optimizer.apps.OptimizerConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ExamScheduling.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ExamScheduling.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Storage
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# File upload limits
FILE_UPLOAD_MAX_MEMORY_SIZE = 300 * 1024 * 1024 # 300 Mb limit

# For floating point comparisons
EPSILON = 0.001
